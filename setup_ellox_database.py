#!/usr/bin/env python3
"""
Script de Inicializa√ß√£o do Banco de Dados Ellox
Este script configura e popula o banco com dados da API Ellox
"""

import sys
import argparse
from datetime import datetime
from ellox_data_extractor import ElloxDataExtractor

def main():
    """Fun√ß√£o principal do script"""
    
    parser = argparse.ArgumentParser(description='Configurar e popular banco de dados Ellox')
    parser.add_argument('--ships-sample', type=int, default=100, 
                       help='N√∫mero de navios para amostra de voyages (padr√£o: 100)')
    parser.add_argument('--skip-voyages', action='store_true',
                       help='Pular extra√ß√£o de voyages (apenas terminais, navios e carriers)')
    parser.add_argument('--force', action='store_true',
                       help='For√ßar recria√ß√£o das tabelas')
    
    args = parser.parse_args()
    
    print("üöÄ CONFIGURA√á√ÉO DO BANCO DE DADOS ELLOX")
    print("=" * 50)
    print(f"üìä Configura√ß√µes:")
    print(f"  ‚Ä¢ Amostra de voyages: {args.ships_sample}")
    print(f"  ‚Ä¢ Pular voyages: {'Sim' if args.skip_voyages else 'N√£o'}")
    print(f"  ‚Ä¢ For√ßar recria√ß√£o: {'Sim' if args.force else 'N√£o'}")
    print()
    
    try:
        # Inicializar extrator
        print("üîÑ Inicializando extrator...")
        extractor = ElloxDataExtractor()
        print("‚úÖ Extrator inicializado com sucesso")
        
        start_time = datetime.now()
        
        # Criar tabelas
        if args.force:
            print("üóëÔ∏è Removendo tabelas existentes...")
            # Aqui voc√™ pode adicionar l√≥gica para dropar tabelas se necess√°rio
        
        print("üèóÔ∏è Criando/verificando tabelas...")
        extractor.create_tables()
        
        # Extrair carriers
        print("üè™ Extraindo carriers...")
        carriers = extractor.extract_carriers()
        print(f"‚úÖ {len(carriers)} carriers inseridos")
        
        # Extrair terminais
        print("üè¢ Extraindo terminais...")
        terminals = extractor.extract_terminals()
        print(f"‚úÖ {len(terminals)} terminais inseridos")
        
        # Extrair navios
        print("üö¢ Extraindo navios...")
        ships = extractor.extract_ships(terminals)
        print(f"‚úÖ {len(ships)} navios inseridos")
        
        # Extrair voyages (se n√£o foi pulado)
        voyages = []
        if not args.skip_voyages:
            print(f"‚õµ Extraindo amostra de {args.ships_sample} voyages...")
            voyages = extractor.extract_voyages_sample(args.ships_sample)
            print(f"‚úÖ {len(voyages)} voyages inseridos")
        else:
            print("‚è≠Ô∏è Extra√ß√£o de voyages pulada")
        
        # Resumo final
        end_time = datetime.now()
        duration = end_time - start_time
        
        print()
        print("üéâ CONFIGURA√á√ÉO CONCLU√çDA!")
        print("=" * 30)
        print(f"üìä Resumo:")
        print(f"  ‚Ä¢ Carriers: {len(carriers)}")
        print(f"  ‚Ä¢ Terminais: {len(terminals)}")
        print(f"  ‚Ä¢ Navios: {len(ships)}")
        print(f"  ‚Ä¢ Voyages: {len(voyages)}")
        print(f"  ‚Ä¢ Tempo total: {duration}")
        print()
        print("‚úÖ Banco de dados pronto para uso!")
        print("üîó Execute 'streamlit run app.py' e v√° para a aba 'Tracking > Dados da API'")
        
        return True
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Opera√ß√£o cancelada pelo usu√°rio")
        return False
        
    except Exception as e:
        print(f"\n‚ùå Erro durante a configura√ß√£o: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
