#!/usr/bin/env python3
"""
Script de Inicializa√ß√£o do Sistema de Sincroniza√ß√£o Autom√°tica Ellox
Configura e testa o sistema de sincroniza√ß√£o
"""

import os
import sys
import subprocess
from pathlib import Path

# Adicionar o diret√≥rio raiz ao path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

def print_header():
    print("=" * 60)
    print("üîÑ SISTEMA DE SINCRONIZA√á√ÉO AUTOM√ÅTICA ELLOX")
    print("   Script de Inicializa√ß√£o e Configura√ß√£o")
    print("=" * 60)
    print()

def check_dependencies():
    """Verifica se as depend√™ncias est√£o instaladas"""
    print("üì¶ Verificando depend√™ncias...")
    
    try:
        import APScheduler
        print("‚úÖ APScheduler instalado")
    except ImportError:
        print("‚ùå APScheduler n√£o encontrado")
        print("   Execute: pip install APScheduler>=3.10.0")
        return False
    
    try:
        from ellox_sync_functions import get_sync_config
        print("‚úÖ M√≥dulos de sincroniza√ß√£o carregados")
    except ImportError as e:
        print(f"‚ùå Erro ao carregar m√≥dulos: {e}")
        return False
    
    return True

def create_directories():
    """Cria diret√≥rios necess√°rios"""
    print("\nüìÅ Criando diret√≥rios...")
    
    directories = ['logs', '.streamlit/sessions']
    
    for directory in directories:
        dir_path = project_root / directory
        dir_path.mkdir(parents=True, exist_ok=True)
        print(f"‚úÖ {directory}/")

def test_database_connection():
    """Testa conex√£o com o banco de dados"""
    print("\nüóÑÔ∏è Testando conex√£o com banco de dados...")
    
    try:
        from database import get_database_connection
        conn = get_database_connection()
        conn.close()
        print("‚úÖ Conex√£o com banco Oracle estabelecida")
        return True
    except Exception as e:
        print(f"‚ùå Erro na conex√£o com banco: {e}")
        return False

def create_tables():
    """Cria as tabelas necess√°rias"""
    print("\nüèóÔ∏è Criando tabelas de sincroniza√ß√£o...")
    
    try:
        from database import get_database_connection
        from sqlalchemy import text
        
        # Ler script SQL
        sql_file = project_root / 'scripts' / 'create_sync_tables.sql'
        with open(sql_file, 'r', encoding='utf-8') as f:
            sql_content = f.read()
        
        # Executar comandos SQL
        conn = get_database_connection()
        try:
            # Dividir em comandos individuais
            commands = [cmd.strip() for cmd in sql_content.split(';') if cmd.strip()]
            
            for command in commands:
                if command.upper().startswith(('CREATE', 'INSERT', 'COMMENT')):
                    try:
                        conn.execute(text(command))
                        print(f"‚úÖ Executado: {command[:50]}...")
                    except Exception as e:
                        if "already exists" in str(e).lower() or "already indexed" in str(e).lower():
                            print(f"‚ÑπÔ∏è J√° existe: {command[:50]}...")
                        else:
                            print(f"‚ö†Ô∏è Aviso: {e}")
            
            conn.commit()
            print("‚úÖ Tabelas criadas com sucesso")
            return True
            
        finally:
            conn.close()
            
    except Exception as e:
        print(f"‚ùå Erro ao criar tabelas: {e}")
        return False

def test_sync_functions():
    """Testa as fun√ß√µes de sincroniza√ß√£o"""
    print("\nüß™ Testando fun√ß√µes de sincroniza√ß√£o...")
    
    try:
        from ellox_sync_functions import get_sync_config, get_active_voyages_for_sync
        
        # Testar configura√ß√£o
        config = get_sync_config()
        print(f"‚úÖ Configura√ß√£o carregada: enabled={config['enabled']}, interval={config['interval_minutes']}min")
        
        # Testar busca de viagens ativas
        voyages = get_active_voyages_for_sync()
        print(f"‚úÖ Viagens ativas encontradas: {len(voyages)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao testar fun√ß√µes: {e}")
        return False

def test_api_connection():
    """Testa conex√£o com API Ellox"""
    print("\nüåê Testando conex√£o com API Ellox...")
    
    try:
        from ellox_api import ElloxAPI
        from app_config import ELLOX_API_CONFIG
        
        # Criar cliente de teste
        client = ElloxAPI(
            email=ELLOX_API_CONFIG['email'],
            password=ELLOX_API_CONFIG['password'],
            base_url=ELLOX_API_CONFIG['base_url']
        )
        
        # Testar conex√£o
        result = client.test_connection()
        
        if result.get('success'):
            print("‚úÖ Conex√£o com API Ellox estabelecida")
            return True
        else:
            print(f"‚ö†Ô∏è API Ellox: {result.get('message', 'Erro desconhecido')}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro na conex√£o com API Ellox: {e}")
        print("   Verifique as credenciais em app_config.py")
        return False

def show_next_steps():
    """Mostra pr√≥ximos passos"""
    print("\n" + "=" * 60)
    print("üéâ CONFIGURA√á√ÉO CONCLU√çDA!")
    print("=" * 60)
    print()
    print("üìã PR√ìXIMOS PASSOS:")
    print()
    print("1. üîß CONFIGURAR SINCRONIZA√á√ÉO:")
    print("   - Acesse o sistema Farol")
    print("   - V√° para Setup ‚Üí Sincroniza√ß√£o Autom√°tica")
    print("   - Configure intervalo e ative a sincroniza√ß√£o")
    print()
    print("2. üöÄ INICIAR DAEMON:")
    print("   python ellox_sync_daemon.py")
    print()
    print("3. üìä MONITORAR LOGS:")
    print("   - Tracking ‚Üí Sync Logs (apenas ADMIN)")
    print("   - Ou: tail -f logs/ellox_sync_daemon.log")
    print()
    print("4. üß™ TESTAR MANUALMENTE:")
    print("   python ellox_sync_daemon.py sync-now")
    print()
    print("5. üìà VERIFICAR STATUS:")
    print("   python ellox_sync_daemon.py status")
    print()
    print("=" * 60)

def main():
    """Fun√ß√£o principal"""
    print_header()
    
    # Verificar depend√™ncias
    if not check_dependencies():
        print("\n‚ùå Falha na verifica√ß√£o de depend√™ncias")
        return False
    
    # Criar diret√≥rios
    create_directories()
    
    # Testar banco de dados
    if not test_database_connection():
        print("\n‚ùå Falha na conex√£o com banco de dados")
        return False
    
    # Criar tabelas
    if not create_tables():
        print("\n‚ùå Falha na cria√ß√£o de tabelas")
        return False
    
    # Testar fun√ß√µes
    if not test_sync_functions():
        print("\n‚ùå Falha no teste de fun√ß√µes")
        return False
    
    # Testar API (opcional)
    api_ok = test_api_connection()
    if not api_ok:
        print("\n‚ö†Ô∏è API Ellox n√£o dispon√≠vel - configure credenciais em app_config.py")
    
    # Mostrar pr√≥ximos passos
    show_next_steps()
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
