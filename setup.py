import streamlit as st
from ellox_api import get_default_api_client, ElloxAPI # Import ElloxAPI class for direct use
from app_config import ELLOX_API_CONFIG, PROXY_CONFIG # Import config for default values
from datetime import datetime # NEW
import os # NEW
import requests # NEW
import pandas as pd # NEW
from auth.login import has_access_level, get_current_user # NEW
from auth.auth_db import ( # NEW
    list_users, create_user, update_user, 
    reset_user_password, get_business_units,
    check_username_exists, check_email_exists
)
from ellox_sync_functions import get_sync_config, update_sync_config, get_sync_statistics

def exibir_setup():
    st.title("‚öôÔ∏è Configura√ß√µes do Sistema Farol")

    # NEW: Function to test general internet/proxy connection
    def test_general_connection():
        with st.spinner(st.session_state.get('general_connection_message', 'Testando conex√£o geral...')):
            try:
                # Initialize variables to None to ensure they exist in all code paths
                original_http_proxy = None
                original_https_proxy = None

                proxies = {}
                # Check if proxy credentials are set in session state
                if (st.session_state.proxy_host and st.session_state.proxy_port and
                    st.session_state.proxy_username and st.session_state.proxy_password):
                    
                    proxy_url = f"http://{st.session_state.proxy_username}:{st.session_state.proxy_password}@{st.session_state.proxy_host}:{st.session_state.proxy_port}"
                    proxies = {
                        "http": proxy_url,
                        "https": proxy_url,
                    }
                    st.session_state.general_connection_message = "Testando conex√£o via proxy..."
                else:
                    st.session_state.general_connection_message = "Testando conex√£o direta (sem proxy)..."
                    # Ensure no proxy environment variables interfere if not set by the app
                    # Temporarily clear proxy env vars for this request
                    original_http_proxy = os.environ.get('http_proxy')
                    original_https_proxy = os.environ.get('https_proxy')
                    if 'http_proxy' in os.environ: del os.environ['http_proxy']
                    if 'https_proxy' in os.environ: del os.environ['https_proxy']

                response = requests.get("https://www.google.com", timeout=10, proxies=proxies)

                # Restore original proxy env vars if they existed
                if original_http_proxy: os.environ['http_proxy'] = original_http_proxy
                if original_https_proxy: os.environ['https_proxy'] = original_https_proxy

                if response.status_code == 200:
                    st.session_state.general_connection_result = {
                        "success": True,
                        "message": f"Conex√£o bem-sucedida (Status: {response.status_code})",
                        "response_time": response.elapsed.total_seconds()
                    }
                else:
                    st.session_state.general_connection_result = {
                        "success": False,
                        "message": f"Falha na conex√£o (Status: {response.status_code})",
                        "error": f"HTTP Status Code: {response.status_code}"
                    }
            except requests.exceptions.ProxyError as e:
                st.session_state.general_connection_result = {
                    "success": False,
                    "message": "Falha na conex√£o via proxy",
                    "error": str(e)
                }
            except requests.exceptions.RequestException as e:
                st.session_state.general_connection_result = {
                    "success": False,
                    "message": "Falha na conex√£o geral",
                    "error": str(e)
                }
            st.session_state.general_connection_last_validated = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # Initialize session state for credentials if not already present
    if 'api_email' not in st.session_state:
        st.session_state.api_email = ELLOX_API_CONFIG.get("email", "")
    if 'api_password' not in st.session_state:
        st.session_state.api_password = ELLOX_API_CONFIG.get("password", "")
    if 'api_base_url' not in st.session_state:
        st.session_state.api_base_url = ELLOX_API_CONFIG.get("base_url", "https://apidtz.comexia.digital")
    # NEW: Initialize last validated time
    if 'api_last_validated' not in st.session_state:
        st.session_state.api_last_validated = "Nunca validado"

    # Initialize session state for proxy credentials
    if 'proxy_username' not in st.session_state:
        st.session_state.proxy_username = PROXY_CONFIG.get("username", "")
    if 'proxy_password' not in st.session_state:
        st.session_state.proxy_password = PROXY_CONFIG.get("password", "")
    if 'proxy_host' not in st.session_state:
        st.session_state.proxy_host = PROXY_CONFIG.get("host", "")
    if 'proxy_port' not in st.session_state:
        st.session_state.proxy_port = PROXY_CONFIG.get("port", "")

    # NEW: Initialize session state for general connection test
    if 'general_connection_result' not in st.session_state:
        st.session_state.general_connection_result = {"success": False, "message": "Nunca testado"}
    if 'general_connection_last_validated' not in st.session_state:
        st.session_state.general_connection_last_validated = "Nunca validado"
    if 'general_connection_message' not in st.session_state:
        st.session_state.general_connection_message = "Testando conex√£o geral..."

    # Function to test connection and update session state for Ellox API
    def test_api_connection():
        with st.spinner("Testando conex√£o com a API Ellox..."):
            # Create a client with current session state credentials
            client = ElloxAPI(
                email=st.session_state.api_email,
                password=st.session_state.api_password,
                base_url=st.session_state.api_base_url
            )
            connection_result = client.test_connection()
            
            # Ensure 'message' key is always present
            if "message" not in connection_result:
                if connection_result.get("success"):
                    connection_result["message"] = "Conex√£o bem-sucedida"
                else:
                    connection_result["message"] = connection_result.get("error", "Erro desconhecido")
            
            st.session_state.api_connection_result = connection_result
            st.session_state.api_last_validated = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # Initialize session state for API connection test result
    if 'api_connection_result' not in st.session_state:
        st.session_state.api_connection_result = {"success": False, "message": "Nunca testado"}

    # Run test on first load or if explicitly requested
    if st.session_state.api_connection_result == {"success": False, "message": "Nunca testado"}:
        test_api_connection()

    # Definir abas (com administra√ß√£o de usu√°rios e sincroniza√ß√£o para ADMIN)
    if has_access_level('ADMIN'):
        tabs = st.tabs(["Gerenciamento de Credenciais", "Administra√ß√£o de Usu√°rios", "üîÑ Sincroniza√ß√£o Autom√°tica"])
    else:
        tabs = st.tabs(["Gerenciamento de Credenciais"])

    with tabs[0]:
        st.info("As credenciais salvas aqui s√£o usadas para autenticar com a API Ellox e o Proxy corporativo. As altera√ß√µes s√£o tempor√°rias para esta sess√£o.")

        col_general_conn, col_api_conn = st.columns(2)

        with col_general_conn:
            st.subheader("Conex√£o Geral (Internet/Proxy)")
            general_result = st.session_state.general_connection_result
            api_result = st.session_state.api_connection_result
            
            # Se a API Ellox est√° funcionando, considerar a conex√£o geral como OK tamb√©m
            if api_result.get("success", False):
                st.success(f"Online ‚úÖ (via API Ellox)")
                st.caption(f"√öltimo teste: {st.session_state.api_last_validated}")
            elif general_result["success"]:
                st.success(f"Online ‚úÖ ({general_result.get('response_time', 0.0):.2f}s)")
                st.caption(f"√öltimo teste: {st.session_state.general_connection_last_validated}")
            else:
                st.error(f"Offline ‚ùå: {general_result.get('error', 'Erro desconhecido')}")
                st.caption(f"√öltimo teste: {st.session_state.general_connection_last_validated}")
            
            if st.button("Testar Conex√£o Geral", key="test_general_conn_card_btn"):
                test_general_connection()

        with col_api_conn:
            st.subheader("Conex√£o API Ellox")
            api_result = st.session_state.api_connection_result
            if api_result["success"]:
                st.success(f"Online ‚úÖ ({api_result.get('response_time', 0.0):.2f}s)")
            else:
                st.error(f"Offline ‚ùå: {api_result.get('error', 'Erro desconhecido')}")
            st.caption(f"√öltimo teste: {st.session_state.api_last_validated}")
            if st.button("Testar Conex√£o API Ellox", key="test_api_conn_card_btn"):
                test_api_connection()
                st.rerun()

        st.markdown("---") # Separator

        # --- Ellox API Credentials Section ---
        with st.form("api_credentials_form_individual"): # NEW: Separate form for API credentials
            with st.expander("Credenciais da API Ellox", expanded=False):
                email_input = st.text_input("Email da API Ellox", value=st.session_state.api_email, key="email_input")
                password_input = st.text_input("Senha da API Ellox", value=st.session_state.api_password, type="password", key="password_input")
                base_url_input = st.text_input("URL Base da API Ellox", value=st.session_state.api_base_url, key="base_url_input")
                submitted_api = st.form_submit_button("Salvar Credenciais da API Ellox") # MOVED INSIDE EXPANDER
            
            if submitted_api:
                st.session_state.api_email = email_input
                st.session_state.api_password = password_input
                st.session_state.api_base_url = base_url_input
                # Trigger re-test of API connection after saving credentials
                test_api_connection()
                st.session_state.api_save_message = "‚úÖ Credenciais da API Ellox salvas para a sess√£o atual!"

        if 'api_save_message' in st.session_state:
            st.success(st.session_state.api_save_message)

        # --- Proxy Credentials Section ---
        with st.form("proxy_credentials_form_individual"): # NEW: Separate form for Proxy credentials
            with st.expander("Credenciais do Proxy Corporativo", expanded=False):
                proxy_username_input = st.text_input("Usu√°rio do Proxy", value=st.session_state.proxy_username, key="proxy_username_input")
                proxy_password_input = st.text_input("Senha do Proxy", value=st.session_state.proxy_password, type="password", key="proxy_password_input")
                col_proxy_host, col_proxy_port = st.columns(2)
                with col_proxy_host:
                    proxy_host_input = st.text_input("Host do Proxy", value=st.session_state.proxy_host, key="proxy_host_input")
                with col_proxy_port:
                    proxy_port_input = st.text_input("Porta do Proxy", value=st.session_state.proxy_port, key="proxy_port_input")
                submitted_proxy = st.form_submit_button("Salvar Credenciais do Proxy") # MOVED INSIDE EXPANDER
            
            if submitted_proxy:
                st.session_state.proxy_username = proxy_username_input
                st.session_state.proxy_password = proxy_password_input
                st.session_state.proxy_host = proxy_host_input
                st.session_state.proxy_port = proxy_port_input

                if st.session_state.proxy_username and st.session_state.proxy_password and st.session_state.proxy_host and st.session_state.proxy_port:
                    proxy_url = f"http://{st.session_state.proxy_username}:{st.session_state.proxy_password}@{st.session_state.proxy_host}:{st.session_state.proxy_port}"
                    os.environ['http_proxy'] = proxy_url
                    os.environ['HTTP_PROXY'] = proxy_url
                    os.environ['https_proxy'] = proxy_url
                    os.environ['HTTPS_PROXY'] = proxy_url
                    st.session_state.proxy_save_message = "‚úÖ Credenciais do Proxy aplicadas ao ambiente da sess√£o."
                else:
                    for var in ['http_proxy', 'HTTP_PROXY', 'https_proxy', 'HTTPS_PROXY']:
                        if var in os.environ:
                            del os.environ[var]
                    st.session_state.proxy_save_message = "‚ö†Ô∏è Credenciais do Proxy incompletas ou removidas. Proxy desativado para a sess√£o."

                if 'api_connection_result' in st.session_state:
                    del st.session_state.api_connection_result

        if 'proxy_save_message' in st.session_state:
            if "‚úÖ" in st.session_state.proxy_save_message:
                st.success(st.session_state.proxy_save_message)
            else:
                st.warning(st.session_state.proxy_save_message)

    # Aba de Administra√ß√£o de Usu√°rios (apenas para ADMIN)
    if has_access_level('ADMIN') and len(tabs) > 1:
        with tabs[1]:
            show_user_administration()
    
    # Aba de Sincroniza√ß√£o Autom√°tica (apenas para ADMIN)
    if has_access_level('ADMIN') and len(tabs) > 2:
        with tabs[2]:
            show_sync_configuration()

    print("‚öôÔ∏è Setup") # Keep the original print for now, can remove later if not needed

def show_user_administration():
    """Exibe interface de administra√ß√£o de usu√°rios"""
    st.header("üë• Administra√ß√£o de Usu√°rios")
    st.markdown("---")
    
    # Cards com m√©tricas
    users = list_users()
    total_users = len(users)
    active_users = len([u for u in users if u['is_active'] == 1])
    inactive_users = total_users - active_users
    
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("Total de Usu√°rios", total_users)
    with col2:
        st.metric("Usu√°rios Ativos", active_users, delta=f"{inactive_users} inativos")
    with col3:
        admin_count = len([u for u in users if u['access_level'] == 'ADMIN'])
        st.metric("Administradores", admin_count)
    with col4:
        edit_count = len([u for u in users if u['access_level'] == 'EDIT'])
        st.metric("Editores", edit_count)
    
    st.markdown("---")
    
    # Sub-abas para funcionalidades
    sub_tabs = st.tabs(["üìã Listar Usu√°rios", "‚ûï Novo Usu√°rio", "‚úèÔ∏è Editar Usu√°rio", "üîë Reset de Senha"])
    
    with sub_tabs[0]:
        show_user_list(users)
    
    with sub_tabs[1]:
        show_create_user_form()
    
    with sub_tabs[2]:
        show_edit_user_form(users)
    
    with sub_tabs[3]:
        show_reset_password_form(users)

def show_user_list(users):
    """Lista todos os usu√°rios em tabela formatada"""
    st.subheader("Usu√°rios Cadastrados")
    
    if not users:
        st.info("Nenhum usu√°rio cadastrado.")
        return
    
    # Converter para DataFrame
    df = pd.DataFrame(users)
    
    # Formatar colunas
    df['is_active'] = df['is_active'].apply(lambda x: '‚úÖ Ativo' if x == 1 else '‚ùå Inativo')
    df['access_level'] = df['access_level'].replace({
        'VIEW': 'üëÅÔ∏è Visualiza√ß√£o',
        'EDIT': '‚úèÔ∏è Edi√ß√£o',
        'ADMIN': '‚öôÔ∏è Administrador'
    })
    df['business_unit'] = df['business_unit'].fillna('Todas')
    
    # Renomear colunas para exibi√ß√£o
    df = df.rename(columns={
        'username': 'Usu√°rio',
        'full_name': 'Nome Completo',
        'email': 'Email',
        'business_unit': 'Unidade de Neg√≥cio',
        'access_level': 'N√≠vel de Acesso',
        'is_active': 'Status',
        'last_login': '√öltimo Login'
    })
    
    # Exibir tabela
    st.dataframe(
        df[['Usu√°rio', 'Nome Completo', 'Email', 'Unidade de Neg√≥cio', 
            'N√≠vel de Acesso', 'Status', '√öltimo Login']],
        use_container_width=True,
        hide_index=True
    )

def show_create_user_form():
    """Formul√°rio de cria√ß√£o de usu√°rio"""
    st.subheader("Criar Novo Usu√°rio")
    
    business_units = get_business_units()
    unit_options = ['Todas'] + [u['UNIT_NAME'] for u in business_units]
    
    with st.form("create_user_form"):
        col1, col2 = st.columns(2)
        
        with col1:
            username = st.text_input("Usu√°rio*", placeholder="usuario.nome", 
                                   help="Nome √∫nico para login", key="create_username")
            email = st.text_input("Email*", placeholder="usuario@empresa.com", key="create_email")
            full_name = st.text_input("Nome Completo*", placeholder="Nome Sobrenome", key="create_full_name")
        
        with col2:
            password = st.text_input("Senha Inicial*", type="password",
                                    help="Usu√°rio ser√° solicitado a trocar no primeiro login", key="create_password")
            
            business_unit = st.selectbox("Unidade de Neg√≥cio", options=unit_options)
            
            access_level = st.selectbox(
                "N√≠vel de Acesso*",
                options=['VIEW', 'EDIT', 'ADMIN'],
                format_func=lambda x: {'VIEW': 'üëÅÔ∏è Visualiza√ß√£o', 'EDIT': '‚úèÔ∏è Edi√ß√£o', 'ADMIN': '‚öôÔ∏è Administrador'}[x]
            )
        
        st.markdown("**Obs:** Usu√°rio ser√° for√ßado a trocar a senha no primeiro login.")
        
        if st.form_submit_button("‚ûï Criar Usu√°rio", use_container_width=True):
            if not all([username, email, password, full_name]):
                st.error("‚ùå Preencha todos os campos obrigat√≥rios (*)")
            elif len(password) < 6:
                st.error("‚ùå A senha deve ter no m√≠nimo 6 caracteres")
            elif check_username_exists(username):
                st.error("‚ùå Username j√° existe. Escolha outro.")
            elif check_email_exists(email):
                st.error("‚ùå Email j√° existe. Escolha outro.")
            else:
                # Converter business_unit
                bu_value = None if business_unit == 'Todas' else next(
                    (u['UNIT_CODE'] for u in business_units if u['UNIT_NAME'] == business_unit), None
                )
                
                if create_user(username, email, password, full_name, bu_value, 
                             access_level, get_current_user()):
                    st.success(f"‚úÖ Usu√°rio '{username}' criado com sucesso!")
                    st.balloons()  # Efeito visual de sucesso
                    st.info("üîÑ Atualizando lista de usu√°rios...")
                    import time
                    time.sleep(1)  # Pequeno delay para garantir que a mensagem seja vista
                    # Limpar campos do formul√°rio
                    keys_to_clear = ['create_username', 'create_email', 'create_full_name', 'create_password']
                    for key in keys_to_clear:
                        if key in st.session_state:
                            del st.session_state[key]
                    st.rerun()
                else:
                    st.error("‚ùå Erro ao criar usu√°rio. Tente novamente.")

def show_edit_user_form(users):
    """Formul√°rio de edi√ß√£o de usu√°rio"""
    st.subheader("Editar Usu√°rio")
    
    if not users:
        st.info("Nenhum usu√°rio para editar.")
        return
    
    business_units = get_business_units()
    unit_options = ['Todas'] + [u['UNIT_NAME'] for u in business_units]
    
    # Sele√ß√£o de usu√°rio
    user_to_edit = st.selectbox(
        "Selecione o usu√°rio",
        options=[u['username'] for u in users],
        format_func=lambda x: f"{x} - {next(u['full_name'] for u in users if u['username'] == x)}"
    )
    
    if user_to_edit:
        user_data = next(u for u in users if u['username'] == user_to_edit)
        
        with st.form("edit_user_form"):
            col1, col2 = st.columns(2)
            
            with col1:
                st.text_input("Usu√°rio (n√£o edit√°vel)", value=user_data['username'], disabled=True)
                email = st.text_input("Email", value=user_data['email'])
                full_name = st.text_input("Nome Completo", value=user_data['full_name'])
            
            with col2:
                business_unit_display = user_data.get('business_unit') or 'Todas'
                business_unit_idx = unit_options.index(business_unit_display) if business_unit_display in unit_options else 0
                
                business_unit = st.selectbox(
                    "Unidade de Neg√≥cio",
                    options=unit_options,
                    index=business_unit_idx
                )
                
                access_level = st.selectbox(
                    "N√≠vel de Acesso",
                    options=['VIEW', 'EDIT', 'ADMIN'],
                    format_func=lambda x: {'VIEW': 'üëÅÔ∏è Visualiza√ß√£o', 'EDIT': '‚úèÔ∏è Edi√ß√£o', 'ADMIN': '‚öôÔ∏è Administrador'}[x],
                    index=['VIEW', 'EDIT', 'ADMIN'].index(user_data['access_level'])
                )
                
                is_active = st.selectbox(
                    "Status",
                    options=[1, 0],
                    format_func=lambda x: '‚úÖ Ativo' if x == 1 else '‚ùå Inativo',
                    index=0 if user_data['is_active'] == 1 else 1
                )
            
            if st.form_submit_button("üíæ Salvar Altera√ß√µes", use_container_width=True):
                # Converter business_unit
                bu_value = None if business_unit == 'Todas' else next(
                    (u['UNIT_CODE'] for u in business_units if u['UNIT_NAME'] == business_unit), None
                )
                
                if update_user(
                    user_data['user_id'], email, full_name, bu_value,
                    access_level, is_active, get_current_user()
                ):
                    st.success("‚úÖ Usu√°rio atualizado com sucesso!")
                    st.balloons()  # Efeito visual de sucesso
                    st.info("üîÑ Atualizando lista de usu√°rios...")
                    import time
                    time.sleep(1)  # Pequeno delay para garantir que a mensagem seja vista
                    st.rerun()
                else:
                    st.error("‚ùå Erro ao atualizar usu√°rio. Tente novamente.")

def show_reset_password_form(users):
    """Formul√°rio de reset de senha"""
    st.subheader("Reset de Senha")
    
    if not users:
        st.info("Nenhum usu√°rio para resetar senha.")
        return
    
    with st.form("reset_password_form"):
        user_to_reset = st.selectbox(
            "Selecione o usu√°rio",
            options=[u['username'] for u in users],
            format_func=lambda x: f"{x} - {next(u['full_name'] for u in users if u['username'] == x)}"
        )
        
        new_password = st.text_input("Nova Senha", type="password")
        confirm_password = st.text_input("Confirmar Nova Senha", type="password")
        
        st.markdown("**Obs:** Usu√°rio ser√° for√ßado a trocar a senha no pr√≥ximo login.")
        
        if st.form_submit_button("üîë Resetar Senha", use_container_width=True):
            if not new_password or not confirm_password:
                st.error("‚ùå Preencha todos os campos")
            elif new_password != confirm_password:
                st.error("‚ùå As senhas n√£o coincidem")
            elif len(new_password) < 6:
                st.error("‚ùå A senha deve ter no m√≠nimo 6 caracteres")
            else:
                user_data = next(u for u in users if u['username'] == user_to_reset)
                
                if reset_user_password(user_data['user_id'], new_password, get_current_user()):
                    st.success(f"‚úÖ Senha do usu√°rio '{user_to_reset}' resetada com sucesso!")
                    st.balloons()  # Efeito visual de sucesso
                    st.info("üîÑ Atualizando lista de usu√°rios...")
                    import time
                    time.sleep(1)  # Pequeno delay para garantir que a mensagem seja vista
                    st.rerun()
                else:
                    st.error("‚ùå Erro ao resetar senha. Tente novamente.")


def show_sync_configuration():
    """Exibe interface de configura√ß√£o da sincroniza√ß√£o autom√°tica Ellox"""
    st.header("üîÑ Sincroniza√ß√£o Autom√°tica Ellox API")
    st.markdown("Configure a sincroniza√ß√£o autom√°tica de dados de viagens com a API Ellox.")
    st.markdown("---")
    
    try:
        # Carregar configura√ß√£o atual
        config = get_sync_config()
        
        # Cards de status
        col1, col2, col3 = st.columns(3)
        
        with col1:
            status_icon = "‚úÖ" if config['enabled'] else "‚ùå"
            status_text = "Ativa" if config['enabled'] else "Inativa"
            st.metric("Status", f"{status_icon} {status_text}")
        
        with col2:
            interval_text = f"{config['interval_minutes']} min"
            if config['interval_minutes'] >= 60:
                hours = config['interval_minutes'] // 60
                minutes = config['interval_minutes'] % 60
                if minutes == 0:
                    interval_text = f"{hours}h"
                else:
                    interval_text = f"{hours}h {minutes}min"
            st.metric("Intervalo", interval_text)
        
        with col3:
            last_exec = config.get('last_execution')
            if last_exec:
                st.metric("√öltima Execu√ß√£o", last_exec.strftime("%d/%m %H:%M"))
            else:
                st.metric("√öltima Execu√ß√£o", "Nunca")
        
        st.markdown("---")
        
        # Formul√°rio de configura√ß√£o
        st.subheader("‚öôÔ∏è Configura√ß√µes")
        
        with st.form("sync_config_form"):
            col1, col2 = st.columns(2)
            
            with col1:
                enabled = st.checkbox(
                    "Ativar sincroniza√ß√£o autom√°tica",
                    value=config['enabled'],
                    help="Quando ativado, o sistema sincronizar√° automaticamente os dados de viagens com a API Ellox"
                )
            
            with col2:
                interval_options = [
                    (30, "30 minutos"),
                    (60, "1 hora"),
                    (120, "2 horas"),
                    (240, "4 horas"),
                    (480, "8 horas")
                ]
                
                current_interval = config['interval_minutes']
                interval_index = next((i for i, (val, _) in enumerate(interval_options) if val == current_interval), 1)
                
                interval_minutes = st.selectbox(
                    "Intervalo de sincroniza√ß√£o",
                    options=[val for val, _ in interval_options],
                    format_func=lambda x: next(label for val, label in interval_options if val == x),
                    index=interval_index,
                    help="Frequ√™ncia com que o sistema verificar√° por atualiza√ß√µes na API Ellox"
                )
            
            # Informa√ß√µes adicionais
            st.info("""
            **Como funciona:**
            - O sistema consulta a API Ellox no intervalo configurado
            - Apenas viagens sem data de chegada ao destino final s√£o monitoradas
            - Mudan√ßas detectadas s√£o salvas automaticamente no hist√≥rico
            - Logs detalhados est√£o dispon√≠veis na aba Tracking
            """)
            
            if st.form_submit_button("üíæ Salvar Configura√ß√£o", type="primary"):
                try:
                    # Atualizar configura√ß√£o
                    update_sync_config(
                        enabled=enabled,
                        interval_minutes=interval_minutes,
                        updated_by=get_current_user()
                    )
                    
                    st.success("‚úÖ Configura√ß√£o salva com sucesso!")
                    st.balloons()
                    
                    # Atualizar p√°gina
                    st.rerun()
                    
                except Exception as e:
                    st.error(f"‚ùå Erro ao salvar configura√ß√£o: {str(e)}")
        
        st.markdown("---")
        
        # Estat√≠sticas
        st.subheader("üìä Estat√≠sticas (√öltimos 30 dias)")
        
        try:
            stats = get_sync_statistics(days=30)
            
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric(
                    "Total de Execu√ß√µes",
                    f"{stats['total_executions']:,}",
                    help="N√∫mero total de sincroniza√ß√µes executadas"
                )
            
            with col2:
                st.metric(
                    "Taxa de Sucesso",
                    f"{stats['success_rate']:.1f}%",
                    help="Percentual de execu√ß√µes bem-sucedidas"
                )
            
            with col3:
                st.metric(
                    "Viagens Ativas",
                    f"{stats['active_voyages']:,}",
                    help="Viagens sendo monitoradas atualmente"
                )
            
            with col4:
                avg_time = stats['avg_execution_time_ms']
                st.metric(
                    "Tempo M√©dio",
                    f"{avg_time:.0f}ms",
                    help="Tempo m√©dio de execu√ß√£o por sincroniza√ß√£o"
                )
            
            # Resumo detalhado
            st.subheader("üìã Resumo Detalhado")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.write("**Execu√ß√µes por Status:**")
                st.write(f"‚úÖ Sucessos: {stats['successful_executions']}")
                st.write(f"‚ÑπÔ∏è Sem mudan√ßas: {stats['no_changes_executions']}")
                st.write(f"‚ùå Erros: {stats['error_executions']}")
            
            with col2:
                st.write("**Mudan√ßas Detectadas:**")
                st.write(f"üìä Total: {stats['total_changes_detected']}")
                if stats['total_executions'] > 0:
                    avg_changes = stats['total_changes_detected'] / stats['total_executions']
                    st.write(f"üìà M√©dia por execu√ß√£o: {avg_changes:.1f}")
        
        except Exception as e:
            st.warning(f"‚ö†Ô∏è N√£o foi poss√≠vel carregar estat√≠sticas: {str(e)}")
        
        st.markdown("---")
        
        # A√ß√µes manuais
        st.subheader("üîß A√ß√µes Manuais")
        
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("üîÑ Executar Sincroniza√ß√£o Agora", help="For√ßa uma sincroniza√ß√£o imediata"):
                with st.spinner("Executando sincroniza√ß√£o..."):
                    try:
                        from ellox_sync_service import sync_all_active_voyages
                        result = sync_all_active_voyages()
                        
                        st.success("‚úÖ Sincroniza√ß√£o executada com sucesso!")
                        st.json(result)
                        
                    except Exception as e:
                        st.error(f"‚ùå Erro na sincroniza√ß√£o: {str(e)}")
        
        with col2:
            if st.button("üìä Ver Logs Detalhados", help="Abre a aba de logs no Tracking"):
                st.info("üí° Acesse a aba 'Tracking' ‚Üí 'Sync Logs' para ver os logs detalhados")
    
    except Exception as e:
        st.error(f"‚ùå Erro ao carregar configura√ß√£o de sincroniza√ß√£o: {str(e)}")
        st.error("Verifique se as tabelas de sincroniza√ß√£o foram criadas corretamente.")