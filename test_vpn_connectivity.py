#!/usr/bin/env python3
"""
Teste de Conectividade VPN vs API Ellox
Diagn√≥stico completo para problemas de rede corporativa
"""

import requests
import time
import socket
import ssl
from datetime import datetime
import json

def test_basic_connectivity():
    """Testa conectividade b√°sica de rede"""
    print("üåê TESTE DE CONECTIVIDADE B√ÅSICA")
    print("=" * 50)
    
    # Teste 1: DNS Resolution
    print("üîÑ Testando resolu√ß√£o DNS...")
    try:
        ip = socket.gethostbyname('apidtz.comexia.digital')
        print(f"‚úÖ DNS resolvido: apidtz.comexia.digital ‚Üí {ip}")
        dns_ok = True
    except socket.gaierror as e:
        print(f"‚ùå DNS falhou: {e}")
        dns_ok = False
    
    # Teste 2: Ping b√°sico (simulado)
    print("üîÑ Testando conectividade TCP...")
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(10)
        result = sock.connect_ex(('apidtz.comexia.digital', 443))
        sock.close()
        
        if result == 0:
            print("‚úÖ Porta 443 (HTTPS) acess√≠vel")
            tcp_ok = True
        else:
            print(f"‚ùå Porta 443 inacess√≠vel (c√≥digo: {result})")
            tcp_ok = False
    except Exception as e:
        print(f"‚ùå Teste TCP falhou: {e}")
        tcp_ok = False
    
    return dns_ok, tcp_ok

def test_ssl_handshake():
    """Testa handshake SSL/TLS"""
    print("\nüîê TESTE DE SSL/TLS")
    print("=" * 50)
    
    try:
        # Criar contexto SSL
        context = ssl.create_default_context()
        context.check_hostname = False
        context.verify_mode = ssl.CERT_NONE
        
        # Conectar via SSL
        with socket.create_connection(('apidtz.comexia.digital', 443), timeout=10) as sock:
            with context.wrap_socket(sock, server_hostname='apidtz.comexia.digital') as ssock:
                print("‚úÖ Handshake SSL/TLS bem-sucedido")
                print(f"   Protocolo: {ssock.version()}")
                print(f"   Cipher: {ssock.cipher()}")
                ssl_ok = True
    except Exception as e:
        print(f"‚ùå Handshake SSL falhou: {e}")
        ssl_ok = False
    
    return ssl_ok

def test_http_requests():
    """Testa requisi√ß√µes HTTP com diferentes configura√ß√µes"""
    print("\nüåê TESTE DE REQUISI√á√ïES HTTP")
    print("=" * 50)
    
    base_url = "https://apidtz.comexia.digital"
    
    # Configura√ß√µes de teste
    configs = [
        {
            "name": "Configura√ß√£o Padr√£o",
            "timeout": 30,
            "verify": True,
            "proxies": None
        },
        {
            "name": "Sem Verifica√ß√£o SSL",
            "timeout": 30,
            "verify": False,
            "proxies": None
        },
        {
            "name": "Timeout Reduzido",
            "timeout": 10,
            "verify": True,
            "proxies": None
        },
        {
            "name": "Timeout Muito Reduzido",
            "timeout": 5,
            "verify": True,
            "proxies": None
        }
    ]
    
    results = []
    
    for config in configs:
        print(f"\nüîÑ {config['name']}...")
        try:
            # Teste de conectividade b√°sica
            start_time = time.time()
            response = requests.get(
                f"{base_url}/api/auth",
                timeout=config['timeout'],
                verify=config['verify'],
                proxies=config['proxies']
            )
            end_time = time.time()
            
            response_time = round((end_time - start_time) * 1000, 2)
            
            print(f"‚úÖ Conectou em {response_time}ms")
            print(f"   Status: {response.status_code}")
            print(f"   Headers: {dict(list(response.headers.items())[:3])}")
            
            results.append({
                "config": config['name'],
                "success": True,
                "time": response_time,
                "status": response.status_code
            })
            
        except requests.exceptions.Timeout:
            print(f"‚è∞ Timeout ap√≥s {config['timeout']}s")
            results.append({
                "config": config['name'],
                "success": False,
                "error": "Timeout"
            })
            
        except requests.exceptions.ConnectionError as e:
            print(f"üîå Erro de conex√£o: {e}")
            results.append({
                "config": config['name'],
                "success": False,
                "error": f"ConnectionError: {str(e)[:100]}"
            })
            
        except requests.exceptions.SSLError as e:
            print(f"üîê Erro SSL: {e}")
            results.append({
                "config": config['name'],
                "success": False,
                "error": f"SSLError: {str(e)[:100]}"
            })
            
        except Exception as e:
            print(f"‚ùå Erro inesperado: {e}")
            results.append({
                "config": config['name'],
                "success": False,
                "error": f"Unexpected: {str(e)[:100]}"
            })
    
    return results

def test_api_authentication():
    """Testa autentica√ß√£o na API Ellox"""
    print("\nüîë TESTE DE AUTENTICA√á√ÉO API")
    print("=" * 50)
    
    # Credenciais de teste (substitua pelas suas)
    test_credentials = {
        "email": "seu_email@exemplo.com",  # SUBSTITUA AQUI
        "senha": "sua_senha"              # SUBSTITUA AQUI
    }
    
    print("‚ö†Ô∏è  IMPORTANTE: Configure suas credenciais no arquivo antes de executar!")
    print("   Edite as linhas 95-96 com seu email e senha da API Ellox")
    
    # Verificar se credenciais foram configuradas
    if test_credentials["email"] == "seu_email@exemplo.com":
        print("‚ùå Credenciais n√£o configuradas - pulando teste de autentica√ß√£o")
        return False
    
    try:
        url = "https://apidtz.comexia.digital/api/auth"
        headers = {"Content-Type": "application/json"}
        
        print("üîÑ Testando autentica√ß√£o...")
        start_time = time.time()
        
        response = requests.post(
            url,
            json=test_credentials,
            headers=headers,
            timeout=30,
            verify=False  # Desabilitar verifica√ß√£o SSL para teste
        )
        
        end_time = time.time()
        response_time = round((end_time - start_time) * 1000, 2)
        
        print(f"‚úÖ Resposta recebida em {response_time}ms")
        print(f"   Status: {response.status_code}")
        
        if response.status_code == 200:
            try:
                data = response.json()
                print("‚úÖ Autentica√ß√£o bem-sucedida!")
                print(f"   Token recebido: {data.get('access_token', 'N/A')[:20]}...")
                return True
            except json.JSONDecodeError:
                print("‚ö†Ô∏è  Resposta n√£o √© JSON v√°lido")
                print(f"   Conte√∫do: {response.text[:200]}")
                return False
        else:
            print(f"‚ùå Falha na autentica√ß√£o (Status: {response.status_code})")
            print(f"   Resposta: {response.text[:200]}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro na autentica√ß√£o: {e}")
        return False

def test_proxy_detection():
    """Detecta configura√ß√µes de proxy"""
    print("\nüîç DETEC√á√ÉO DE PROXY")
    print("=" * 50)
    
    # Verificar vari√°veis de ambiente de proxy
    proxy_vars = ['HTTP_PROXY', 'HTTPS_PROXY', 'http_proxy', 'https_proxy', 'NO_PROXY', 'no_proxy']
    
    proxies_detected = False
    for var in proxy_vars:
        value = os.environ.get(var)
        if value:
            print(f"‚úÖ {var}: {value}")
            proxies_detected = True
    
    if not proxies_detected:
        print("‚ÑπÔ∏è  Nenhuma vari√°vel de proxy detectada")
    
    # Testar se requests detecta proxy automaticamente
    try:
        session = requests.Session()
        proxies = session.proxies
        if proxies:
            print(f"‚úÖ Proxies detectados pelo requests: {proxies}")
        else:
            print("‚ÑπÔ∏è  Nenhum proxy detectado pelo requests")
    except Exception as e:
        print(f"‚ö†Ô∏è  Erro ao detectar proxies: {e}")
    
    return proxies_detected

def test_network_route():
    """Testa rota de rede (simulado)"""
    print("\nüõ£Ô∏è  AN√ÅLISE DE ROTA")
    print("=" * 50)
    
    try:
        # Teste de conectividade com diferentes timeouts
        timeouts = [1, 3, 5, 10, 30]
        
        for timeout in timeouts:
            try:
                start_time = time.time()
                response = requests.get(
                    "https://apidtz.comexia.digital/api/auth",
                    timeout=timeout,
                    verify=False
                )
                end_time = time.time()
                response_time = round((end_time - start_time) * 1000, 2)
                
                print(f"‚úÖ Timeout {timeout}s: Conectou em {response_time}ms")
                break
                
            except requests.exceptions.Timeout:
                print(f"‚è∞ Timeout {timeout}s: Falhou")
                continue
            except Exception as e:
                print(f"‚ùå Timeout {timeout}s: {str(e)[:50]}")
                break
                
    except Exception as e:
        print(f"‚ùå Erro no teste de rota: {e}")

def generate_report(results):
    """Gera relat√≥rio final"""
    print("\nüìä RELAT√ìRIO FINAL")
    print("=" * 60)
    
    print("üéØ DIAGN√ìSTICO VPN vs API ELLOX")
    print(f"üìÖ Data/Hora: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    print()
    
    # An√°lise de resultados
    successful_configs = [r for r in results if r.get('success', False)]
    failed_configs = [r for r in results if not r.get('success', False)]
    
    print(f"‚úÖ Configura√ß√µes bem-sucedidas: {len(successful_configs)}")
    print(f"‚ùå Configura√ß√µes com falha: {len(failed_configs)}")
    
    if successful_configs:
        print("\nüèÜ CONFIGURA√á√ïES QUE FUNCIONARAM:")
        for result in successful_configs:
            print(f"   ‚Ä¢ {result['config']}: {result['time']}ms")
    
    if failed_configs:
        print("\nüí• CONFIGURA√á√ïES QUE FALHARAM:")
        for result in failed_configs:
            print(f"   ‚Ä¢ {result['config']}: {result.get('error', 'Erro desconhecido')}")
    
    # Recomenda√ß√µes
    print("\nüí° RECOMENDA√á√ïES:")
    
    if len(successful_configs) > 0:
        print("‚úÖ A API Ellox est√° acess√≠vel - problema pode ser espec√≠fico da aplica√ß√£o")
        print("üîß Tente usar a configura√ß√£o que funcionou no seu c√≥digo")
    else:
        print("‚ùå A API Ellox n√£o est√° acess√≠vel - problema de rede/VPN")
        print("üîß Verifique:")
        print("   ‚Ä¢ Configura√ß√µes de VPN")
        print("   ‚Ä¢ Firewall corporativo")
        print("   ‚Ä¢ Proxy settings")
        print("   ‚Ä¢ DNS corporativo")
    
    print("\nüõ†Ô∏è  PR√ìXIMOS PASSOS:")
    print("1. Se algum teste passou, use essa configura√ß√£o no seu c√≥digo")
    print("2. Se todos falharam, verifique configura√ß√µes de rede/VPN")
    print("3. Entre em contato com o TI da empresa sobre acesso √† API")
    print("4. Considere usar proxy corporativo se necess√°rio")

def main():
    """Fun√ß√£o principal"""
    print("üîç DIAGN√ìSTICO DE CONECTIVIDADE VPN vs API ELLOX")
    print("=" * 60)
    print("Este script testa diferentes configura√ß√µes de rede para identificar")
    print("problemas de conectividade com a API Ellox em ambientes corporativos.")
    print()
    
    # Importar os aqui para evitar erro se n√£o estiver dispon√≠vel
    import os
    
    # Executar todos os testes
    dns_ok, tcp_ok = test_basic_connectivity()
    ssl_ok = test_ssl_handshake()
    http_results = test_http_requests()
    auth_ok = test_api_authentication()
    proxy_detected = test_proxy_detection()
    test_network_route()
    
    # Gerar relat√≥rio
    generate_report(http_results)
    
    print("\n" + "=" * 60)
    print("‚úÖ Teste conclu√≠do! Verifique o relat√≥rio acima.")
    print("üìÅ Salve este arquivo para refer√™ncia futura.")

if __name__ == "__main__":
    main()
