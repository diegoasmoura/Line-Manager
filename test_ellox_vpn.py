#!/usr/bin/env python3
"""
Teste Simples de Conectividade API Ellox com VPN
Script focado para diagnosticar problemas de VPN corporativa
"""

import requests
import time
import json
from datetime import datetime

def test_ellox_api_simple():
    """Teste simples e direto da API Ellox"""
    print("üîç TESTE SIMPLES API ELLOX")
    print("=" * 40)
    
    # URL da API
    api_url = "https://apidtz.comexia.digital/api/auth"
    
    # Credenciais (CONFIGURE AQUI)
    credentials = {
        "email": "seu_email@exemplo.com",  # SUBSTITUA
        "senha": "sua_senha"              # SUBSTITUA
    }
    
    print("‚ö†Ô∏è  CONFIGURE SUAS CREDENCIAIS:")
    print("   Edite as linhas 15-16 com seu email e senha da API Ellox")
    print()
    
    # Verificar se credenciais foram configuradas
    if credentials["email"] == "seu_email@exemplo.com":
        print("‚ùå Credenciais n√£o configuradas!")
        print("   Edite o arquivo e configure seu email e senha")
        return False
    
    # Teste 1: Conectividade b√°sica
    print("üîÑ Teste 1: Conectividade b√°sica...")
    try:
        start_time = time.time()
        response = requests.get(api_url, timeout=10, verify=False)
        end_time = time.time()
        
        response_time = round((end_time - start_time) * 1000, 2)
        print(f"‚úÖ Conectou em {response_time}ms - Status: {response.status_code}")
        
    except requests.exceptions.Timeout:
        print("‚è∞ TIMEOUT - A API n√£o respondeu em 10 segundos")
        print("   Poss√≠vel causa: VPN bloqueando ou API lenta")
        return False
        
    except requests.exceptions.ConnectionError as e:
        print(f"üîå ERRO DE CONEX√ÉO - {e}")
        print("   Poss√≠vel causa: VPN n√£o permite acesso √† API")
        return False
        
    except Exception as e:
        print(f"‚ùå ERRO INESPERADO - {e}")
        return False
    
    # Teste 2: Autentica√ß√£o
    print("\nüîÑ Teste 2: Autentica√ß√£o...")
    try:
        headers = {"Content-Type": "application/json"}
        
        start_time = time.time()
        response = requests.post(
            api_url,
            json=credentials,
            headers=headers,
            timeout=15,
            verify=False
        )
        end_time = time.time()
        
        response_time = round((end_time - start_time) * 1000, 2)
        print(f"‚úÖ Resposta em {response_time}ms - Status: {response.status_code}")
        
        if response.status_code == 200:
            try:
                data = response.json()
                print("‚úÖ AUTENTICA√á√ÉO BEM-SUCEDIDA!")
                print(f"   Token: {data.get('access_token', 'N/A')[:30]}...")
                return True
            except:
                print("‚ö†Ô∏è  Resposta n√£o √© JSON v√°lido")
                print(f"   Conte√∫do: {response.text[:100]}")
        else:
            print(f"‚ùå FALHA NA AUTENTICA√á√ÉO - Status: {response.status_code}")
            print(f"   Resposta: {response.text[:200]}")
            
    except requests.exceptions.Timeout:
        print("‚è∞ TIMEOUT na autentica√ß√£o")
        return False
    except Exception as e:
        print(f"‚ùå ERRO na autentica√ß√£o: {e}")
        return False
    
    return False

def test_different_timeouts():
    """Testa diferentes timeouts para identificar o problema"""
    print("\nüîÑ TESTE DE DIFERENTES TIMEOUTS")
    print("=" * 40)
    
    api_url = "https://apidtz.comexia.digital/api/auth"
    timeouts = [5, 10, 20, 30, 60]
    
    for timeout in timeouts:
        print(f"üîÑ Testando timeout de {timeout}s...")
        try:
            start_time = time.time()
            response = requests.get(api_url, timeout=timeout, verify=False)
            end_time = time.time()
            
            response_time = round((end_time - start_time) * 1000, 2)
            print(f"   ‚úÖ Sucesso em {response_time}ms")
            break
            
        except requests.exceptions.Timeout:
            print(f"   ‚è∞ Timeout ap√≥s {timeout}s")
            continue
        except Exception as e:
            print(f"   ‚ùå Erro: {str(e)[:50]}")
            break

def test_with_proxy():
    """Testa com configura√ß√µes de proxy"""
    print("\nüîÑ TESTE COM PROXY")
    print("=" * 40)
    
    # Configura√ß√µes de proxy comuns
    proxy_configs = [
        None,  # Sem proxy
        {"http": "http://proxy:8080", "https": "https://proxy:8080"},  # Proxy HTTP
        {"http": "http://proxy:3128", "https": "https://proxy:3128"},  # Proxy alternativo
    ]
    
    api_url = "https://apidtz.comexia.digital/api/auth"
    
    for i, proxies in enumerate(proxy_configs):
        config_name = "Sem proxy" if proxies is None else f"Proxy {i}"
        print(f"üîÑ Testando {config_name}...")
        
        try:
            response = requests.get(api_url, timeout=10, verify=False, proxies=proxies)
            print(f"   ‚úÖ {config_name}: Funcionou! Status: {response.status_code}")
            break
        except Exception as e:
            print(f"   ‚ùå {config_name}: {str(e)[:50]}")

def main():
    """Fun√ß√£o principal"""
    print("üîç DIAGN√ìSTICO VPN vs API ELLOX")
    print("=" * 50)
    print("Data/Hora:", datetime.now().strftime('%d/%m/%Y %H:%M:%S'))
    print()
    
    # Executar testes
    success = test_ellox_api_simple()
    
    if not success:
        print("\nüîß EXECUTANDO TESTES ADICIONAIS...")
        test_different_timeouts()
        test_with_proxy()
    
    print("\n" + "=" * 50)
    print("üìä RESULTADO DO DIAGN√ìSTICO:")
    
    if success:
        print("‚úÖ A API Ellox est√° funcionando!")
        print("   O problema pode estar na configura√ß√£o da aplica√ß√£o principal")
        print("   Verifique as credenciais no arquivo de configura√ß√£o")
    else:
        print("‚ùå A API Ellox n√£o est√° acess√≠vel")
        print("   Poss√≠veis causas:")
        print("   ‚Ä¢ VPN bloqueando acesso √† API")
        print("   ‚Ä¢ Firewall corporativo")
        print("   ‚Ä¢ Proxy necess√°rio")
        print("   ‚Ä¢ DNS corporativo")
        print()
        print("üí° SOLU√á√ïES:")
        print("1. Verifique se a VPN permite acesso √† API")
        print("2. Entre em contato com o TI da empresa")
        print("3. Tente desligar a VPN temporariamente")
        print("4. Configure proxy se necess√°rio")
    
    print("\n‚úÖ Teste conclu√≠do!")

if __name__ == "__main__":
    main()
